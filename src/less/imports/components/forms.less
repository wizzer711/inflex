// ---------------------------------------------------------------------------------------------------------
// Shared Component Styles (Compile Once)
// ---------------------------------------------------------------------------------------------------------

	& when (@breakpoint-attr = @data-attr)
	{
		@_outerHeight: @component--height; // Includes border height
		
		@_innerHeight: @component--height - (@component--border-width * 2); // Excludes border height

		@_paddingX: @_innerHeight * 0.25; // Horizontal padding = 1/4 component height

		@_paddingY: (@_innerHeight - 1.5) / 2; // Vertical padding = 1/2 component height, after line-height

		textarea, select, input, button, a[data-inflex*='button']
		{
			appearance   : none;
			position     : relative;
			max-width    : 100%;
			min-height   : @_outerHeight;
			padding      : @_paddingY @_paddingX;
			border-radius: @component--border-radius;
			border-style : @component--border-style;
			border-width : @component--border-width;
			border-color : @component--border-color;
			color        : @component--text-color;

			&:focus { outline: 0; }
		}

		textarea, select[multiple]
		{
			display: block;
			line-height: @line-height !important;
			// padding-top: @_paddingX;
			// padding-bottom: @_paddingX;
		}

		select:not([multiple])
		{
			padding: @_paddingY ((@_paddingX * 2) + 1em) @_paddingY @_paddingX;
			background-color: white;
			background-size: @font-size;
			background-repeat: no-repeat;
			background-position: right @_paddingX top 50%;

			.background-svg-uri('chevron-down', @text-color);
		}

		button, a[data-inflex*='button'], input[type="submit"], input[type="reset"], input[type="button"]
		{
			padding: @_paddingY (@_innerHeight * 0.375);
		}

		[data-inflex~='field:minimal']
		{
			position: relative;

			input, textarea, select:not([multiple])
			{
				z-index: 1;
				width: 100%;
				background-color: transparent;
			    border-top-color: transparent;
			    border-left-color: transparent;
			    border-right-color: transparent;
			    border-radius: 0;

			    ~ label
				{
					position: absolute;
					top: 0; left: 0;
					border: @component--border-width solid transparent;
					color: @component--placeholder-color;
				}

				&:not(:focus)::placeholder
			    {
			    	color: transparent;
			    }
			}

			input:-webkit-autofill
			{
				transition-property: background-color, color;
				transition-duration: 0s;
				transition-delay: 3600s;
			}

			input, textarea, select:not([multiple])
			{
				&, ~ label
				{
					line-height: @_innerHeight * 0.66;

					padding: (@_innerHeight * 0.33) @_paddingX 0;
				}

				&[data-inflex~='state:1'] ~ label
			    {
					padding-top: 0 !important;

					transform: scale(0.8125);
				
					transform-origin: @_paddingX (@_paddingX * -1);
			    }
			}
		}
	}

// ---------------------------------------------------------------------------------------------------------
// Component Sizes (Responsive)
// ---------------------------------------------------------------------------------------------------------

	.iterate--component-sizes (@bpo, @bpc)
	{
		.iterate ();

	    .iterate (@i: 1) when (@i <= length(@component--sizes))
	    {
	        .iterate (@i + 1);

	        @_group: extract(@component--sizes, @i);

			@_name: extract(@_group, 1);

			@_outerHeight: extract(@_group, 2);

			@_innerHeight: @_outerHeight - (@component--border-width * 2);

			@_downScale: extract(@_group, 3);

			@_upScale: extract(@_group, 4);

			@_paddingX: @_innerHeight * 0.25;

			@_paddingY: (@_innerHeight - 1.5) / 2;

			textarea, input
			{
				&[data-inflex~='@{bpo}size:@{_name}@{bpc}']
				{
					min-height: @_outerHeight;

			    	padding: @_paddingY @_paddingX;
				}
			}

			button, a[data-inflex*='button']
			{
				&[data-inflex~='@{bpo}size:@{_name}@{bpc}']
				{
					min-height: @_outerHeight;

		    		padding: @_paddingY (@_innerHeight * 0.375);

					i { transform: scale(@_upScale); }
				}
			}

			select:not([multiple])
			{
				&[data-inflex~='@{bpo}size:@{_name}@{bpc}']
				{
					min-height: @_outerHeight;

			    	padding: @_paddingY ((@_paddingX * 2) + 1em) @_paddingY @_paddingX;

					background-position: right @_paddingX top 50%;
				}
			}

			[data-inflex~='field:minimal']
			{
				input, textarea, select:not([multiple])
				{
					&[data-inflex~='@{bpo}size:@{_name}@{bpc}']
					{
						&, ~ label
						{
							line-height: @_innerHeight * 0.66;
							
							padding: (@_innerHeight * 0.33) @_paddingX 0;
						}

						&[data-inflex~='state:1'] ~ label
					    {
							transform: scale(@_downScale);

	    					transform-origin: @_paddingX (@_paddingX * -1);
					    }
					}
				}
			}
	    }
	}

	.iterate--component-sizes (@bpo, @bpc);